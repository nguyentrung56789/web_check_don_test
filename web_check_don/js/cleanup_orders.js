// ===== cleanup_orders.js =====
(() => {
  // -- n·∫°p supabase UMD (ƒë√£ c√≥ qua <script>, ·ªü ƒë√¢y ch·ªâ ki·ªÉm tra) --
  if (!window.supabase) {
    console.error("‚ö†Ô∏è Ch∆∞a load @supabase/supabase-js@2. Th√™m <script> tr∆∞·ªõc cleanup_orders.js");
    return;
  }

  // -- L·∫•y c·∫•u h√¨nh, √©p v·ªÅ string, tr√°nh truy·ªÅn object v√†o createClient --
  async function getSupabase() {
    // 1) ∆Øu ti√™n getConfig trong internal_key.js
    let rawUrl = window.getConfig?.("url");
    let rawKey = window.getConfig?.("service") || window.getConfig?.("anon");

    // 2) N·∫øu thi·∫øu, th·ª≠ /api/getConfig (c√≥ header x-internal-key)
    if (!rawUrl || !rawKey) {
      try {
        const resp = await fetch("/api/getConfig", {
          headers: { "x-internal-key": window.getInternalKey?.() || "" }
        });
        if (resp.ok) {
          const j = await resp.json();
          rawUrl = rawUrl || j.url;
          rawKey = rawKey || j.service || j.anon || j.key;
        }
      } catch {}
    }

    // 3) Chu·∫©n ho√°: n·∫øu v·∫´n l√† object => l·∫•y ƒë√∫ng field
    const url =
      typeof rawUrl === "string" ? rawUrl :
      (rawUrl && typeof rawUrl.url === "string" ? rawUrl.url : "");

    const key =
      typeof rawKey === "string" ? rawKey :
      (rawKey && (rawKey.service || rawKey.anon || rawKey.key)) || "";

    if (!/^https?:\/\//i.test(url) || !key) {
      console.error("‚ùå Supabase URL/KEY kh√¥ng h·ª£p l·ªá", { rawUrl, rawKey, url, key });
      throw new Error("Thi·∫øu ho·∫∑c sai Supabase URL/KEY");
    }

    return window.supabase.createClient(url.trim(), key.trim());
  }

  // -- chunk util --
  const chunk = (arr, n) =>
    Array.from({ length: Math.ceil(arr.length / n) }, (_, i) => arr.slice(i * n, (i + 1) * n));

  // -- cutoff theo MONTH_LIMIT trong internal_key.js (m·∫∑c ƒë·ªãnh 2) --
  function getCutoffISO() {
    const cfg = window.getConfigCleanup?.() || {};
    const monthLimit = Number.isFinite(cfg.MONTH_LIMIT) ? cfg.MONTH_LIMIT : 2;
    const d = new Date();
    d.setMonth(d.getMonth() - monthLimit);
    console.log(`üßπ Gi·ªØ l·∫°i ${monthLimit} th√°ng g·∫ßn nh·∫•t. Cutoff = ${d.toISOString()}`);
    return d.toISOString();
  }

  // -- API ch√≠nh: cleanup --
  window.cleanup = async function cleanup({ dry = true } = {}) {
    const supa   = await getSupabase();
    const cutoff = getCutoffISO();

    // t√™n b·∫£ng/c·ªôt (ƒë·ªïi n·∫øu DB b·∫°n kh√°c)
    const TABLE_ORDERS      = "don_hang";
    const TABLE_ORDER_ITEMS = "don_hang_chitiet";
    const TABLE_KIOTCOD     = "don_hang_kiot_cod";
    const COL_TIME_ORDERS   = "ngay";   // ho·∫∑c 'created_at'
    const COL_TIME_KIOTCOD  = "ngay";
    const COL_ORDER_ID      = "ma_hd";
    const COL_DETAIL_FK     = "ma_hd";

    console.log(dry ? "üîé DRY RUN (ch·ªâ ƒë·∫øm, kh√¥ng xo√°)" : "üóëÔ∏è X√ìA TH·∫¨T");

    // 1) L·∫•y to√†n b·ªô m√£ ho√° ƒë∆°n qu√° h·∫°n (ph√¢n trang)
    let allIds = [];
    let from = 0, size = 2000;
    while (true) {
      const { data, error } = await supa
        .from(TABLE_ORDERS)
        .select(COL_ORDER_ID)
        .lt(COL_TIME_ORDERS, cutoff)
        .order(COL_ORDER_ID, { ascending: true })
        .range(from, from + size - 1);

      if (error) throw error;
      if (!data?.length) break;
      allIds.push(...data.map(r => r[COL_ORDER_ID]));
      from += size;
      if (data.length < size) break;
    }
    allIds = [...new Set(allIds)];
    console.log(`üßæ S·ªë ƒë∆°n h√†ng > cutoff: ${allIds.length}`);

    // 2) Chi ti·∫øt ƒë∆°n h√†ng theo ma_hd
    if (allIds.length) {
      if (dry) {
        let approx = 0;
        for (const part of chunk(allIds, 1000)) {
          const { count, error } = await supa
            .from(TABLE_ORDER_ITEMS)
            .select(COL_DETAIL_FK, { count: "exact", head: true })
            .in(COL_DETAIL_FK, part);
          if (error) throw error;
          approx += (count || 0);
        }
        console.log(`   ‚Ä¢ Chi ti·∫øt d·ª± ki·∫øn xo√°: ~${approx}`);
      } else {
        for (const part of chunk(allIds, 500)) {
          const { error } = await supa
            .from(TABLE_ORDER_ITEMS)
            .delete()
            .in(COL_DETAIL_FK, part);
          if (error) throw error;
        }
        console.log(`   ‚úÖ ƒê√£ xo√° chi ti·∫øt theo ${allIds.length} m√£ ho√° ƒë∆°n`);
      }
    }

    // 3) ƒê∆°n h√†ng ch√≠nh
    if (dry) {
      const { count, error } = await supa
        .from(TABLE_ORDERS)
        .select(COL_ORDER_ID, { count: "exact", head: true })
        .lt(COL_TIME_ORDERS, cutoff);
      if (error) throw error;
      console.log(`   ‚Ä¢ ƒê∆°n h√†ng d·ª± ki·∫øn xo√°: ${count || 0}`);
    } else {
      const { count, error } = await supa
        .from(TABLE_ORDERS)
        .delete({ count: "exact" })
        .lt(COL_TIME_ORDERS, cutoff);
      if (error) throw error;
      console.log(`   ‚úÖ ƒê√£ xo√° ${count || 0} ƒë∆°n h√†ng`);
    }

    // 4) B·∫£ng COD
    if (dry) {
      const { count, error } = await supa
        .from(TABLE_KIOTCOD)
        .select("*", { count: "exact", head: true })
        .lt(COL_TIME_KIOTCOD, cutoff);
      if (error) throw error;
      console.log(`   ‚Ä¢ COD d·ª± ki·∫øn xo√°: ${count || 0}`);
    } else {
      const { count, error } = await supa
        .from(TABLE_KIOTCOD)
        .delete({ count: "exact" })
        .lt(COL_TIME_KIOTCOD, cutoff);
      if (error) throw error;
      console.log(`   ‚úÖ ƒê√£ xo√° ${count || 0} b·∫£n ghi COD`);
    }

    console.log(dry ? "üîé DRY RUN xong (ch∆∞a xo√° g√¨)" : "üßπ Ho√†n t·∫•t xo√° th·∫≠t");
  };

  console.log("‚úÖ S·∫µn s√†ng. M·ªü Console v√† ch·∫°y cleanup({dry:true}) ƒë·ªÉ test, cleanup({dry:false}) ƒë·ªÉ xo√° th·∫≠t.");
})();
